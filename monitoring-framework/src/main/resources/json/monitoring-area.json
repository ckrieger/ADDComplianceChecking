{
  "id": null,
  "name": "motivation-scenario",
  "queueHost": "localhost",
  "queueName": "event-logs-queue",
  "patternInstances": [
    {
      "id": null,
      "name": "Watchdog",
      "constraintStatement": "create schema VMCount(number int);create window VMCountWin.win:length(1) as VMCount;create schema ReduceCountEvent(number int);create window ReduceCountEventWin.win:length(1) as ReduceCountEvent;create schema IncreaseCountEvent(number int);create window IncreaseCountEventWin.win:length(1) as IncreaseCountEvent;create context SegmentedByScalingGroup partition by scalingGroupId  from VirtualMachine;insert into VMCount select cast(count(*),int) as number from VirtualMachine(scalingGroupId = \"${scalingGroupId}\").std:unique(vmId).win:time_batch(5 sec) vme;insert into ReduceCountEvent select se.number as number from pattern [ every fe=VMCount -> se=VMCount(fe.number > se.number)];insert into IncreaseCountEvent select see.number as number from pattern [ every fee=VMCount -> see=VMCount(fee.number < see.number)];@Name('Watchdog Violation')select * from pattern [ every re=ReduceCountEvent -> not ie=IncreaseCountEvent(re.number < ie.number) and timer:interval(${timeThreshold} milliseconds)];",
      "variables": [
        {
          "id": null,
          "key": "timeThreshold",
          "value": "1000"
        },
        {
          "id": null,
          "key": "scalingGroupId",
          "value": "inventoryService"
        }
      ],
      "isActive": false,
      "isViolated": false
    },
    {
      "id": null,
      "name": "CircuitBreaker",
      "constraintStatement": "",
      "variables": [
        {
          "id": null,
          "key": "failureThreshold",
          "value": "2"
        },
        {
          "id": null,
          "key": "timeout",
          "value": "10000"
        }
      ],
      "isActive": false,
      "isViolated": false
    },
    {
      "id": null,
      "name": "StaticWorkload",
      "constraintStatement": "create schema FirstEvent(value double); create window FirstEventWin.win:length(1) as FirstEvent; insert into FirstEvent select firstEvent.cpu as value from pattern [ firstEvent=VirtualMachine]; create variable double variation = \"${variation}\"; @Name('StaticWorkload Violation')select * from VirtualMachine.win:length(1) n, FirstEvent.win:length(1) fe having cpu > fe.value + variation or cpu < fe.value - variation;",
      "variables": [
        {
          "id": null,
          "key": "variation",
          "value": "0.1"
        }
      ],
      "isActive": false,
      "isViolated": false
    }
  ],
  "isActive": false
}

